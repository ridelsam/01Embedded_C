
005IOPinRead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000128  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002d0  080002d8  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002d0  080002d0  000102d8  2**0
                  CONTENTS
  4 .ARM          00000000  080002d0  080002d0  000102d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002d0  080002d8  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002d0  080002d0  000102d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002d4  080002d4  000102d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102d8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009c4  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001a8  00000000  00000000  00010ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  00010ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001cba  00000000  00000000  00010ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000647  00000000  00000000  00012baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007f37  00000000  00000000  000131f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001b128  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000054  00000000  00000000  0001b17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080002b8 	.word	0x080002b8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080002b8 	.word	0x080002b8

080001e8 <main>:

//Attempt


int main(void)
{
 80001e8:	b430      	push	{r4, r5}

	//2. Configure the mode of the GPIOD pin 12 as output
	//a. clear the 24th and 25th bit positions (CLEAR to make sure it's 00 to easily manipulate)
	*pPortDModeReg &= ~(3<<24);     //pushing 11 starting at 24th bit
	//b. make 24th bit position as 1 (SET)
	*pPortDModeReg |= (1<<24);
 80001ea:	4d09      	ldr	r5, [pc, #36]	; (8000210 <main+0x28>)
	*pClkCtrlReg |= 0b1;		//set GPIOAEN
 80001ec:	4c09      	ldr	r4, [pc, #36]	; (8000214 <main+0x2c>)

	//3. Configure the mode of the GPIOA pin 0 as input
	//a. clear the 0th and 1st bit positions to make it Input
	*pPortAModeReg &= ~(3<<0);     //pushing 11 starting at 0th bit
 80001ee:	480a      	ldr	r0, [pc, #40]	; (8000218 <main+0x30>)
	*pPortDModeReg &= ~(3<<24);     //pushing 11 starting at 24th bit
 80001f0:	682b      	ldr	r3, [r5, #0]
	*pClkCtrlReg |= 0b1;		//set GPIOAEN
 80001f2:	6821      	ldr	r1, [r4, #0]
	*pPortAModeReg &= ~(3<<0);     //pushing 11 starting at 0th bit
 80001f4:	6802      	ldr	r2, [r0, #0]
	*pPortDModeReg &= ~(3<<24);     //pushing 11 starting at 24th bit
 80001f6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
	*pPortDModeReg |= (1<<24);
 80001fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*pClkCtrlReg |= 0b1;		//set GPIOAEN
 80001fe:	f041 0109 	orr.w	r1, r1, #9
	*pPortAModeReg &= ~(3<<0);     //pushing 11 starting at 0th bit
 8000202:	f022 0203 	bic.w	r2, r2, #3
	*pPortDModeReg |= (1<<24);
 8000206:	602b      	str	r3, [r5, #0]
	*pClkCtrlReg |= 0b1;		//set GPIOAEN
 8000208:	6021      	str	r1, [r4, #0]
	*pPortAModeReg &= ~(3<<0);     //pushing 11 starting at 0th bit
 800020a:	6002      	str	r2, [r0, #0]
		*pPortAInReg &= 0b1;


		//5. Toggle LED Depending on Status of PA0

		if (*pPortAInReg & 0b1){
 800020c:	e7fe      	b.n	800020c <main+0x24>
 800020e:	bf00      	nop
 8000210:	40020c00 	.word	0x40020c00
 8000214:	40023830 	.word	0x40023830
 8000218:	40020000 	.word	0x40020000

0800021c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800021c:	480d      	ldr	r0, [pc, #52]	; (8000254 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000220:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <LoopForever+0x6>)
  ldr r1, =_edata
 8000226:	490d      	ldr	r1, [pc, #52]	; (800025c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000228:	4a0d      	ldr	r2, [pc, #52]	; (8000260 <LoopForever+0xe>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800022c:	e002      	b.n	8000234 <LoopCopyDataInit>

0800022e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800022e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000232:	3304      	adds	r3, #4

08000234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000238:	d3f9      	bcc.n	800022e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023a:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800023c:	4c0a      	ldr	r4, [pc, #40]	; (8000268 <LoopForever+0x16>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000240:	e001      	b.n	8000246 <LoopFillZerobss>

08000242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000244:	3204      	adds	r2, #4

08000246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000248:	d3fb      	bcc.n	8000242 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024a:	f000 f811 	bl	8000270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800024e:	f7ff ffcb 	bl	80001e8 <main>

08000252 <LoopForever>:

LoopForever:
    b LoopForever
 8000252:	e7fe      	b.n	8000252 <LoopForever>
  ldr   r0, =_estack
 8000254:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800025c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000260:	080002d8 	.word	0x080002d8
  ldr r2, =_sbss
 8000264:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000268:	2000001c 	.word	0x2000001c

0800026c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800026c:	e7fe      	b.n	800026c <ADC_IRQHandler>
	...

08000270 <__libc_init_array>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	4d0d      	ldr	r5, [pc, #52]	; (80002a8 <__libc_init_array+0x38>)
 8000274:	4c0d      	ldr	r4, [pc, #52]	; (80002ac <__libc_init_array+0x3c>)
 8000276:	1b64      	subs	r4, r4, r5
 8000278:	10a4      	asrs	r4, r4, #2
 800027a:	2600      	movs	r6, #0
 800027c:	42a6      	cmp	r6, r4
 800027e:	d109      	bne.n	8000294 <__libc_init_array+0x24>
 8000280:	4d0b      	ldr	r5, [pc, #44]	; (80002b0 <__libc_init_array+0x40>)
 8000282:	4c0c      	ldr	r4, [pc, #48]	; (80002b4 <__libc_init_array+0x44>)
 8000284:	f000 f818 	bl	80002b8 <_init>
 8000288:	1b64      	subs	r4, r4, r5
 800028a:	10a4      	asrs	r4, r4, #2
 800028c:	2600      	movs	r6, #0
 800028e:	42a6      	cmp	r6, r4
 8000290:	d105      	bne.n	800029e <__libc_init_array+0x2e>
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f855 3b04 	ldr.w	r3, [r5], #4
 8000298:	4798      	blx	r3
 800029a:	3601      	adds	r6, #1
 800029c:	e7ee      	b.n	800027c <__libc_init_array+0xc>
 800029e:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a2:	4798      	blx	r3
 80002a4:	3601      	adds	r6, #1
 80002a6:	e7f2      	b.n	800028e <__libc_init_array+0x1e>
 80002a8:	080002d0 	.word	0x080002d0
 80002ac:	080002d0 	.word	0x080002d0
 80002b0:	080002d0 	.word	0x080002d0
 80002b4:	080002d4 	.word	0x080002d4

080002b8 <_init>:
 80002b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ba:	bf00      	nop
 80002bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002be:	bc08      	pop	{r3}
 80002c0:	469e      	mov	lr, r3
 80002c2:	4770      	bx	lr

080002c4 <_fini>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	bf00      	nop
 80002c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ca:	bc08      	pop	{r3}
 80002cc:	469e      	mov	lr, r3
 80002ce:	4770      	bx	lr
