
006LEDToggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000154  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002fc  08000304  00010304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002fc  080002fc  00010304  2**0
                  CONTENTS
  4 .ARM          00000000  080002fc  080002fc  00010304  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002fc  08000304  00010304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002fc  080002fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000300  08000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010304  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a00  00000000  00000000  00010334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001ca  00000000  00000000  00010d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000019  00000000  00000000  00010efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  00010f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000048  00000000  00000000  00010f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001cba  00000000  00000000  00010fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000065d  00000000  00000000  00012c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00007f4c  00000000  00000000  000132bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0001b20b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000054  00000000  00000000  0001b260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080002e4 	.word	0x080002e4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080002e4 	.word	0x080002e4

080001e8 <main>:


	//1. Enable the clock for GPOID and GPIOA peripheral in the AHB1ENR


	*pClkCtrlReg |= (1<<3);		//set GPIODEN
 80001e8:	4812      	ldr	r0, [pc, #72]	; (8000234 <main+0x4c>)
	*pClkCtrlReg |= (1<<0);		//set GPIOAEN

	//2. Configure the mode of the GPIOD pin 12 as output
	//a. clear the 24th and 25th bit positions (CLEAR to make sure it's 00 to easily manipulate)
	*pPortDModeReg &= ~(3<<24);     //pushing 11 starting at 24th bit
 80001ea:	4a13      	ldr	r2, [pc, #76]	; (8000238 <main+0x50>)
	*pPortAModeReg &= ~(3<<0);     //pushing 11 starting at 0th bit

	while(1)
	{
		//4. Read from PA0 Pin
		uint8_t pinStatus = (uint8_t)(*pPortAInReg & 0x1);		//zero out all other bits except bit 0
 80001ec:	4913      	ldr	r1, [pc, #76]	; (800023c <main+0x54>)
			*pPortDOutReg |= (1<<12);


		} else {
			//6.b CLEAR 12th bit of the output data register to make IO pin 12 as LOW
			*pPortDOutReg &= ~(1<<12);
 80001ee:	4b14      	ldr	r3, [pc, #80]	; (8000240 <main+0x58>)
{
 80001f0:	b430      	push	{r4, r5}
	*pClkCtrlReg |= (1<<3);		//set GPIODEN
 80001f2:	6804      	ldr	r4, [r0, #0]
	*pPortAModeReg &= ~(3<<0);     //pushing 11 starting at 0th bit
 80001f4:	4d13      	ldr	r5, [pc, #76]	; (8000244 <main+0x5c>)
	*pClkCtrlReg |= (1<<3);		//set GPIODEN
 80001f6:	f044 0408 	orr.w	r4, r4, #8
 80001fa:	6004      	str	r4, [r0, #0]
	*pClkCtrlReg |= (1<<0);		//set GPIOAEN
 80001fc:	6804      	ldr	r4, [r0, #0]
 80001fe:	f044 0401 	orr.w	r4, r4, #1
 8000202:	6004      	str	r4, [r0, #0]
	*pPortDModeReg &= ~(3<<24);     //pushing 11 starting at 24th bit
 8000204:	6810      	ldr	r0, [r2, #0]
 8000206:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800020a:	6010      	str	r0, [r2, #0]
	*pPortDModeReg |= (1<<24);
 800020c:	6810      	ldr	r0, [r2, #0]
 800020e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8000212:	6010      	str	r0, [r2, #0]
	*pPortAModeReg &= ~(3<<0);     //pushing 11 starting at 0th bit
 8000214:	682a      	ldr	r2, [r5, #0]
 8000216:	f022 0203 	bic.w	r2, r2, #3
 800021a:	602a      	str	r2, [r5, #0]
		uint8_t pinStatus = (uint8_t)(*pPortAInReg & 0x1);		//zero out all other bits except bit 0
 800021c:	680a      	ldr	r2, [r1, #0]
		if (pinStatus){
 800021e:	f012 0f01 	tst.w	r2, #1
			*pPortDOutReg |= (1<<12);
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	bf14      	ite	ne
 8000226:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
			*pPortDOutReg &= ~(1<<12);
 800022a:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	e7f4      	b.n	800021c <main+0x34>
 8000232:	bf00      	nop
 8000234:	40023830 	.word	0x40023830
 8000238:	40020c00 	.word	0x40020c00
 800023c:	40020010 	.word	0x40020010
 8000240:	40020c14 	.word	0x40020c14
 8000244:	40020000 	.word	0x40020000

08000248 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000248:	480d      	ldr	r0, [pc, #52]	; (8000280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800024a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800024c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000250:	480c      	ldr	r0, [pc, #48]	; (8000284 <LoopForever+0x6>)
  ldr r1, =_edata
 8000252:	490d      	ldr	r1, [pc, #52]	; (8000288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000254:	4a0d      	ldr	r2, [pc, #52]	; (800028c <LoopForever+0xe>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000258:	e002      	b.n	8000260 <LoopCopyDataInit>

0800025a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800025c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025e:	3304      	adds	r3, #4

08000260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000264:	d3f9      	bcc.n	800025a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000266:	4a0a      	ldr	r2, [pc, #40]	; (8000290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000268:	4c0a      	ldr	r4, [pc, #40]	; (8000294 <LoopForever+0x16>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800026c:	e001      	b.n	8000272 <LoopFillZerobss>

0800026e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000270:	3204      	adds	r2, #4

08000272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000274:	d3fb      	bcc.n	800026e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000276:	f000 f811 	bl	800029c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027a:	f7ff ffb5 	bl	80001e8 <main>

0800027e <LoopForever>:

LoopForever:
    b LoopForever
 800027e:	e7fe      	b.n	800027e <LoopForever>
  ldr   r0, =_estack
 8000280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000288:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800028c:	08000304 	.word	0x08000304
  ldr r2, =_sbss
 8000290:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000294:	2000001c 	.word	0x2000001c

08000298 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000298:	e7fe      	b.n	8000298 <ADC_IRQHandler>
	...

0800029c <__libc_init_array>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	4d0d      	ldr	r5, [pc, #52]	; (80002d4 <__libc_init_array+0x38>)
 80002a0:	4c0d      	ldr	r4, [pc, #52]	; (80002d8 <__libc_init_array+0x3c>)
 80002a2:	1b64      	subs	r4, r4, r5
 80002a4:	10a4      	asrs	r4, r4, #2
 80002a6:	2600      	movs	r6, #0
 80002a8:	42a6      	cmp	r6, r4
 80002aa:	d109      	bne.n	80002c0 <__libc_init_array+0x24>
 80002ac:	4d0b      	ldr	r5, [pc, #44]	; (80002dc <__libc_init_array+0x40>)
 80002ae:	4c0c      	ldr	r4, [pc, #48]	; (80002e0 <__libc_init_array+0x44>)
 80002b0:	f000 f818 	bl	80002e4 <_init>
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	10a4      	asrs	r4, r4, #2
 80002b8:	2600      	movs	r6, #0
 80002ba:	42a6      	cmp	r6, r4
 80002bc:	d105      	bne.n	80002ca <__libc_init_array+0x2e>
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c4:	4798      	blx	r3
 80002c6:	3601      	adds	r6, #1
 80002c8:	e7ee      	b.n	80002a8 <__libc_init_array+0xc>
 80002ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ce:	4798      	blx	r3
 80002d0:	3601      	adds	r6, #1
 80002d2:	e7f2      	b.n	80002ba <__libc_init_array+0x1e>
 80002d4:	080002fc 	.word	0x080002fc
 80002d8:	080002fc 	.word	0x080002fc
 80002dc:	080002fc 	.word	0x080002fc
 80002e0:	08000300 	.word	0x08000300

080002e4 <_init>:
 80002e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e6:	bf00      	nop
 80002e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ea:	bc08      	pop	{r3}
 80002ec:	469e      	mov	lr, r3
 80002ee:	4770      	bx	lr

080002f0 <_fini>:
 80002f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f2:	bf00      	nop
 80002f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f6:	bc08      	pop	{r3}
 80002f8:	469e      	mov	lr, r3
 80002fa:	4770      	bx	lr
