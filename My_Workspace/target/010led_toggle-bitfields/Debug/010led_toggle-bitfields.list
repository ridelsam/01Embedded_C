
010led_toggle-bitfields.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000178  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000320  08000328  00010328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000320  08000320  00010328  2**0
                  CONTENTS
  4 .ARM          00000000  08000320  08000320  00010328  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000320  08000328  00010328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000320  08000320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000324  08000324  00010324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010328  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010328  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f32  00000000  00000000  00010358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001cf  00000000  00000000  0001128a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00011460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  000114a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001cc4  00000000  00000000  000114d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000626  00000000  00000000  0001319c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000080fe  00000000  00000000  000137c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001b8c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  0001b914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000308 	.word	0x08000308

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000308 	.word	0x08000308

080001e8 <main>:

//Attempt


int main(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b087      	sub	sp, #28
 80001ec:	af00      	add	r7, sp, #0

	*/


	//1. Enable the clock for GPOID and GPIOA peripheral in the AHB1ENR
	RCC_AHB1ENR_t volatile *const pClkCtrlReg  = (RCC_AHB1ENR_t*) 0x40023830;
 80001ee:	4b1a      	ldr	r3, [pc, #104]	; (8000258 <main+0x70>)
 80001f0:	617b      	str	r3, [r7, #20]
	pClkCtrlReg->gpiod_en = 1;
 80001f2:	697a      	ldr	r2, [r7, #20]
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f043 0308 	orr.w	r3, r3, #8
 80001fa:	6013      	str	r3, [r2, #0]
	pClkCtrlReg->gpioa_en = 1;
 80001fc:	697a      	ldr	r2, [r7, #20]
 80001fe:	6813      	ldr	r3, [r2, #0]
 8000200:	f043 0301 	orr.w	r3, r3, #1
 8000204:	6013      	str	r3, [r2, #0]


	//2. Configure the mode of the GPIOD pin 12 as output
	GPIOx_MODE_t volatile *const pPortDModeReg  = (GPIOx_MODE_t*) 0x40020C00;
 8000206:	4b15      	ldr	r3, [pc, #84]	; (800025c <main+0x74>)
 8000208:	613b      	str	r3, [r7, #16]
	pPortDModeReg->pin_12 = 01;
 800020a:	693a      	ldr	r2, [r7, #16]
 800020c:	6813      	ldr	r3, [r2, #0]
 800020e:	2101      	movs	r1, #1
 8000210:	f361 6319 	bfi	r3, r1, #24, #2
 8000214:	6013      	str	r3, [r2, #0]

	//3. Configure the mode of the GPIOA pin 0 as input
	GPIOx_MODE_t volatile *const pPortAModeReg  = (GPIOx_MODE_t*) 0x40020000;
 8000216:	4b12      	ldr	r3, [pc, #72]	; (8000260 <main+0x78>)
 8000218:	60fb      	str	r3, [r7, #12]
	pPortAModeReg->pin_0 = 00;
 800021a:	68fa      	ldr	r2, [r7, #12]
 800021c:	6813      	ldr	r3, [r2, #0]
 800021e:	f36f 0301 	bfc	r3, #0, #2
 8000222:	6013      	str	r3, [r2, #0]


	while(1)
	{
		//4. Read from PA0 Pin
		GPIOx_IDR_t volatile *const pPortAInReg  = (GPIOx_IDR_t*) 0x40020010;
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <main+0x7c>)
 8000226:	60bb      	str	r3, [r7, #8]
		uint8_t pinStatus = (uint8_t) (pPortAInReg->pin_0);
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000230:	b2db      	uxtb	r3, r3
 8000232:	71fb      	strb	r3, [r7, #7]



		//5. Toggle LED Depending on Status of PA0
		GPIOx_ODR_t volatile *const pPortDOutReg  = (GPIOx_ODR_t*) 0x40020C14;
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <main+0x80>)
 8000236:	603b      	str	r3, [r7, #0]

		if (pinStatus){
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d005      	beq.n	800024a <main+0x62>


			//6.a SET 12th bit of the output data register to make IO pin 12 as HIGH
			pPortDOutReg->pin_12 = 1;
 800023e:	683a      	ldr	r2, [r7, #0]
 8000240:	6813      	ldr	r3, [r2, #0]
 8000242:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000246:	6013      	str	r3, [r2, #0]
 8000248:	e7ec      	b.n	8000224 <main+0x3c>


		} else {
			//6.b CLEAR 12th bit of the output data register to make IO pin 12 as LOW
			pPortDOutReg->pin_12 = 0;
 800024a:	683a      	ldr	r2, [r7, #0]
 800024c:	6813      	ldr	r3, [r2, #0]
 800024e:	f36f 330c 	bfc	r3, #12, #1
 8000252:	6013      	str	r3, [r2, #0]
	{
 8000254:	e7e6      	b.n	8000224 <main+0x3c>
 8000256:	bf00      	nop
 8000258:	40023830 	.word	0x40023830
 800025c:	40020c00 	.word	0x40020c00
 8000260:	40020000 	.word	0x40020000
 8000264:	40020010 	.word	0x40020010
 8000268:	40020c14 	.word	0x40020c14

0800026c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000270:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000274:	480c      	ldr	r0, [pc, #48]	; (80002a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000276:	490d      	ldr	r1, [pc, #52]	; (80002ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000278:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <LoopForever+0xe>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800027c:	e002      	b.n	8000284 <LoopCopyDataInit>

0800027e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000282:	3304      	adds	r3, #4

08000284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000288:	d3f9      	bcc.n	800027e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028a:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800028c:	4c0a      	ldr	r4, [pc, #40]	; (80002b8 <LoopForever+0x16>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000290:	e001      	b.n	8000296 <LoopFillZerobss>

08000292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000294:	3204      	adds	r2, #4

08000296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000298:	d3fb      	bcc.n	8000292 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029a:	f000 f811 	bl	80002c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029e:	f7ff ffa3 	bl	80001e8 <main>

080002a2 <LoopForever>:

LoopForever:
    b LoopForever
 80002a2:	e7fe      	b.n	80002a2 <LoopForever>
  ldr   r0, =_estack
 80002a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b0:	08000328 	.word	0x08000328
  ldr r2, =_sbss
 80002b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b8:	2000001c 	.word	0x2000001c

080002bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002bc:	e7fe      	b.n	80002bc <ADC_IRQHandler>
	...

080002c0 <__libc_init_array>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	4d0d      	ldr	r5, [pc, #52]	; (80002f8 <__libc_init_array+0x38>)
 80002c4:	4c0d      	ldr	r4, [pc, #52]	; (80002fc <__libc_init_array+0x3c>)
 80002c6:	1b64      	subs	r4, r4, r5
 80002c8:	10a4      	asrs	r4, r4, #2
 80002ca:	2600      	movs	r6, #0
 80002cc:	42a6      	cmp	r6, r4
 80002ce:	d109      	bne.n	80002e4 <__libc_init_array+0x24>
 80002d0:	4d0b      	ldr	r5, [pc, #44]	; (8000300 <__libc_init_array+0x40>)
 80002d2:	4c0c      	ldr	r4, [pc, #48]	; (8000304 <__libc_init_array+0x44>)
 80002d4:	f000 f818 	bl	8000308 <_init>
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	10a4      	asrs	r4, r4, #2
 80002dc:	2600      	movs	r6, #0
 80002de:	42a6      	cmp	r6, r4
 80002e0:	d105      	bne.n	80002ee <__libc_init_array+0x2e>
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e8:	4798      	blx	r3
 80002ea:	3601      	adds	r6, #1
 80002ec:	e7ee      	b.n	80002cc <__libc_init_array+0xc>
 80002ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f2:	4798      	blx	r3
 80002f4:	3601      	adds	r6, #1
 80002f6:	e7f2      	b.n	80002de <__libc_init_array+0x1e>
 80002f8:	08000320 	.word	0x08000320
 80002fc:	08000320 	.word	0x08000320
 8000300:	08000320 	.word	0x08000320
 8000304:	08000324 	.word	0x08000324

08000308 <_init>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr

08000314 <_fini>:
 8000314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000316:	bf00      	nop
 8000318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031a:	bc08      	pop	{r3}
 800031c:	469e      	mov	lr, r3
 800031e:	4770      	bx	lr
